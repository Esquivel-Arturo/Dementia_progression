
R Under development (unstable) (2017-04-11 r72503) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(msm)
> library(hmm)
Loading required package: survival
Loading required package: expm
Loading required package: Matrix

Attaching package: 'expm'

The following object is masked from 'package:Matrix':

    expm

> 
> # These lines set up the data, and are a copy of jackson.R
> sname <- levels(test1$state)
> qmat <- matrix(0, 6, 6, dimnames=list(from= sname, to=sname))
> qmat[1,2] <- qmat[1,3] <- .01
> qmat[2,4] <- .03
> qmat[3,4] <- .04
> qmat[3,5] <- .03
> qmat[4,5] <- .1
> qmat[,6]  <- c(.02, .02, .02, .02, .06, 0)
> 
> test1$istate <- as.numeric(test1$state)
> otype <- 1 + 1*(test1$istate==6)
> 
> # Do one example as both a monolithic loss function, and as a set of
> #  three separate responses.
> # First the monolithic.  This isn't quite jackson.r: dementia is error free
> #
> e1 <- .12  # an A- as A+ or vice versa
> e2 <- .2   # an N- as N+ or vice versa
> temp <- outer(c("Acorrect"= (1-e1), "Afalse"= e1), 
+               c("Ncorrect"=(1-e2), "Nfalse"= e2), '*')
> 
> missmat <- rbind(temp[c(1,2,3,4)], temp[c(2, 1, 4,3)],
+                  temp[c(3,4,1,2)], temp[c(4, 3, 2, 1)])
> missmat <- cbind(missmat, 0, 0)
> missmat <- rbind(missmat, c(0,0,0,0,1,0), c(0,0,0,0,0,1))
> 
> hmiss <- function(y, ...) {
+     missmat[,y] 
+ }
> 
> mfit3 <- msm(istate ~ age, data=test1, subject= clinic, 
+              qmatrix = qmat, fixedpar=TRUE, death=6,
+              ematrix=missmat, initprob=c(1,1,1,1,0,0)/4)
> 
> init6 <- function(nstate, ...) {
+     c(1,1,1,1,0,0)/4
+ }
> hfit3 <-  hmm(hbind(age, state) ~ 1, data=test1, mc.cores=3,
+                id = clinic, qmatrix = qmat, rfun=hmiss,
+                pfun=init6, mfun=hmmtest, mpar=list(fn="hmmloglik"),
+                otype= otype, death=6)
> all.equal(-2*hfit3$loglik, mfit3$minus2loglik)
[1] TRUE
> 
> # Now do this as a set of 3 response
> # The combined states are 1=A-N-, 2=A+N-, 3=A-N+, 4=A+N+, 5=dementia, 6=death
> # It is not necessary to ignore A and/or N for a demented subject, but we do
> #  so as to exactly match the prior analysis.
> astate <- c(1,2,1,2, NA, NA)[test1$state]
> nstate <- c(1,1,2,2, NA, NA)[test1$state]
> cstate <- c(NA, NA, NA, NA, 1,2)[test1$state]
> 
> # error1 will be called with a vector of 1s and 2s, NA values are not
> #  passed to it.  It returns a column for each y value with nstate rows
> #  (which I know is 6).  Each colum contains prob(y | true state).
> # The mlogit function returns a matrix with n rows and 2 columns, the first
> #  has 1/(1+exp(eta) and the second exp(eta)/(1+exp(eta)).  Per how
> #  we set up rcoef the second element is the smaller one, i.e., the error rate.
> # Looking at error1 below, suppose someone has y=1 = A-.  The states are set
> #  up as A-N-, A+N-, A-N+, A+N+, dementia, death.  So we would want that
> #  column to be (large probability, small, large, small, 0, 0).  The last two
> #  elements are 0 because someone who is demented/dead will never have y=1.
> #
> error1 <- function(y, nstate, eta, gradient=FALSE) {
+     if (is.vector(eta)) eta <- matrix(eta, nrow=1)
+     temp <- mlogit(eta, gradient)
+     indx <- cbind(1:length(y), y)
+     ptemp <- temp[indx]  # pick col 1 or 2 from each row
+     rbind(ptemp, 1-ptemp, ptemp, 1-ptemp, 0, 0)
+ }
> 
> error2 <- function(y, nstate, eta, gradient) {
+     if (is.vector(eta)) eta <- matrix(eta, nrow=1)
+     temp <- mlogit(eta, FALSE)
+     ptemp <- temp[cbind(1:length(y), y)]  # pick col 1 or 2 from each row
+     rbind(ptemp, ptemp, 1-ptemp, 1-ptemp, 0, 0)
+ } 
>    
> error3 <- function(y, nstate, ...) {
+      temp <- matrix(0L, nrow=nstate, ncol=length(y))
+      temp[5,] <- ifelse(y==1, 1, 0)
+      temp[6,] <- ifelse(y==2, 1, 0)
+      temp
+ }
> 
> rcoef <- data.frame(response=1:2, lp=1:2, term=0, coef=1:2,
+                     init=log(c(.12/.88, .2/.8)))
> 
> #double check the error matrices
> temp1 <- error1(astate, 6, matrix(rcoef$init[1], length(astate),1))
> temp2 <- error2(nstate, 6, matrix(rcoef$init[2], length(nstate),1))
> temp3 <- error3(cstate, 6)
> temp4 <- ifelse(is.na(temp1), 1, temp1) * ifelse(is.na(temp2), 1, temp2)
> temp5 <- hmiss(test1$state)
> all.equal(temp5[,test1$istate<5], temp4[,test1$istate < 5],
+           check.attributes=FALSE)
[1] TRUE
> all.equal(temp5[,test1$istate>4], temp3[,test1$istate > 4])
[1] TRUE
> 
> # Now compute
> hfit4 <-  hmm(hbind(age, astate, nstate, cstate) ~ 1, data=test1, mc.cores=1,
+               id = clinic, qmatrix = qmat, 
+               rfun = list(error1, error2, error3), rcoef=rcoef,
+               pfun=init6, mfun=hmmtest, mpar=list(fn="hmmloglik"),
+               otype= otype, death=6)
> all.equal(hfit3$loglik, hfit4$loglik)
[1] TRUE
> 
> 
> # The gradient version uses the hmulti function.
> #  There are no parameters for error3 and hence no derivative is needed.
> err1 <- function(y, nstate, eta, gradient) {
+     statemap <- matrix(c(1,2,1,2,0,0,2,1,2,1,0,0), ncol=2)
+     hmulti(y, nstate, eta, gradient, statemap)
+ }
> 
> err2 <- function(y, nstate, eta, gradient) {
+     statemap <- matrix(c(1,1,2,2,0,0,2,2,1,1,0,0), ncol=2)
+     hmulti(y, nstate, eta, gradient, statemap)
+ }
> 
> etest <- err1(1:2, 6, matrix(-(1:2), ncol=1), gradient=TRUE)
> 
> hfit5 <-  hmm(hbind(age, astate, nstate, cstate) ~ 1, data=test1, mc.cores=1,
+               id = clinic, qmatrix = qmat, 
+               rfun = list(err1, err2, error3), rcoef=rcoef,
+               pfun=init6, mfun=hmmtest, mpar=list(fn="hmmboth"),
+               otype= otype, death=6)
> all.equal(hfit5$loglik, hfit4$loglik)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  1.608   0.056   1.731 
